(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{329:function(t,v,_){"use strict";_.r(v);var s=_(6),e=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"前端单元测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端单元测试"}},[t._v("#")]),t._v(" 前端单元测试")]),t._v(" "),v("h2",{attrs:{id:"测试类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#测试类型"}},[t._v("#")]),t._v(" 测试类型")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("单元测试")]),t._v(" "),v("ul",[v("li",[t._v("指的是以原件的单元为单位，对软件进行测试。单元可以是一个函数，也可以是一个模块或一个组件，**基本特征就是只要输入不变，必定返回同样的输出。**一个软件越容易些单元测试，就表明它的模块化结构越好，给模块之间的耦合越弱。React 的组件化和函数式编程，天生适合进行单元测试")])])]),t._v(" "),v("li",[v("strong",[t._v("功能测试")]),t._v(" "),v("ul",[v("li",[t._v("相当于是"),v("strong",[t._v("黑盒测试")]),t._v("，测试者不了解程序的内部情况，不需要具备编程语言的专门知识，只知道程序的输入、输出和功能，从用户的角度针对软件界面、功能和外部结构进行测试，不考虑内部的逻辑")])])]),t._v(" "),v("li",[v("strong",[t._v("集成测试")]),t._v(" "),v("ul",[v("li",[t._v("在单元测试的基础上，将所有模块按照设计要求组装成子系统或者系统，进行测试")])])]),t._v(" "),v("li",[v("strong",[t._v("冒烟测试")]),t._v(" "),v("ul",[v("li",[t._v("在正式全面的测试之前，对主要功能进行的与测试，确认主要功能是否满足需要，软件是否能正常运行")])])])]),t._v(" "),v("h2",{attrs:{id:"基于测试的开发模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于测试的开发模式"}},[t._v("#")]),t._v(" 基于测试的开发模式")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("TDD")]),t._v(": 测试驱动开发，英文为 Testing Driven Development，强调的是一种开发方式，以测试来驱动整个项目，即先根据接口完成测试编写，然后在完成功能是要不断通过测试，最终目的是通过所有测试\n"),v("ul",[v("li",[t._v("编写测试用例")]),t._v(" "),v("li",[t._v("运行测试，测试用例无法通过测试")]),t._v(" "),v("li",[t._v("编写代码，使测试用例通过测试")]),t._v(" "),v("li",[t._v("优化代码，完成开发")]),t._v(" "),v("li",[t._v("重复以上步骤")])])]),t._v(" "),v("li",[v("strong",[t._v("BDD")]),t._v(": 行为驱动测试，英文为 Behavior Driven Development，强调的是写测试的风格，即测试要写的像自然语言，让项目的各个成员甚至产品都能看懂测试，甚至编写测试\n"),v("ul",[v("li",[t._v("编写代码")]),t._v(" "),v("li",[t._v("编写测试用例，测试无法通过")]),t._v(" "),v("li",[t._v("编写代码，使测试用例通过")]),t._v(" "),v("li",[t._v("优化代码，完成开发")]),t._v(" "),v("li",[t._v("重复以上步骤")])])])]),t._v(" "),v("h2",{attrs:{id:"单元测试框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单元测试框架"}},[t._v("#")]),t._v(" 单元测试框架")]),t._v(" "),v("ul",[v("li",[t._v("jest")])]),t._v(" "),v("h2",{attrs:{id:"jest-相关资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jest-相关资料"}},[t._v("#")]),t._v(" jest 相关资料")]),t._v(" "),v("p",[t._v("官网："),v("a",{attrs:{href:"https://jestjs.io/zh-Hans/docs/getting-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("快速开始 · Jest (jestjs.io)"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("jest 实践指南："),v("a",{attrs:{href:"https://github.yanhaixiang.com/jest-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[t._v("小书介绍 | Jest 实践指南 (yanhaixiang.com)"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"jest"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jest"}},[t._v("#")]),t._v(" jest")]),t._v(" "),v("p",[t._v("特点：")]),t._v(" "),v("ul",[v("li",[t._v("断言-匹配器")]),t._v(" "),v("li",[t._v("测试异步代码")]),t._v(" "),v("li",[t._v("安装和移除-生命周期")]),t._v(" "),v("li",[t._v("模拟函数")]),t._v(" "),v("li",[t._v("快照测试")]),t._v(" "),v("li",[t._v("覆盖报告")])])])}),[],!1,null,null,null);v.default=e.exports}}]);